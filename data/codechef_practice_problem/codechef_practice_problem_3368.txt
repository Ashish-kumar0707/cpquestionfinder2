
Read problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.
You are given a grid with NN rows (numbered 11 through NN from top to bottom) and NN columns (numbered 11 through NN from left to right). Let's denote a cell in the ii-th row and the jj-th column by (i,j)(i,j).
There are KK checkpoints (numbered 11 through KK) in the grid. For each valid ii, the ii-th checkpoint is in the cell (Xi,Yi)(Xi,Yi) and it has two parameters LiLi and RiRi.
A path with length ll is a sequence of pairwise distinct cells (r1,c1)→(r2,c2)→…→(rl,cl)(r1,c1)→(r2,c2)→…→(rl,cl) such that for each valid ii, the cell (ri,ci)(ri,ci) shares a side with the cell (ri+1,ci+1)(ri+1,ci+1). Let's call the cells (r1,c1)(r1,c1) and (rl,cl)(rl,cl) the endpoints of the path.
We are interested in sets of paths which satisfy the following conditions:

Each path must start in a checkpoint and end in a different checkpoint. It must not contain any other cells with checkpoints.
The paths are disjoint, i.e. no cell may be in two or more paths.
For each path: let's denote its length by CC and the checkpoints it connects by pp and qq; then, max(Lp,Lq)≤C≤min(Rp,Rq)max(Lp,Lq)≤C≤min(Rp,Rq) must hold.

Your goal is to find a valid set of paths whose size is as large as possible.
Input

The first line of the input contains two space-separated integers NN and KK.
KK lines follow. For each valid ii, the ii-th of each lines contains four space-separated integers XiXi, YiYi, LiLi and RiRi. 

Output

First, print a line containing a single integer MM ― the number of paths in your set.
Then, print MM lines. For each valid ii, the ii-th of these lines should contain two space-separated integers SiSi and TiTi, followed by a space and a string FiFi, describing the ii-th of your paths in the following way:
The path starts in the cell containing the SiSi-th checkpoint and ends in the cell containing the TiTi-th checkpoint.
FiFi describes the sequence of moves used to reach the ending cell from the starting cell.
Let's denote the current cell by (x,y)(x,y); initially, this is (XSi,YSi)(XSi,YSi). Then, for each character cc of FiFi from the beginning to the end:
If cc is 'L', we move to the cell (x,y−1)(x,y−1).
If cc is 'R', we move to the cell (x,y+1)(x,y+1).
If cc is 'U', we move to the cell (x−1,y)(x−1,y).
If cc is 'D', we move to the cell (x+1,y)(x+1,y).
At the end of this process, (x,y)(x,y) should be (XTi,YTi)(XTi,YTi).

Constraints

N=500N=500
2≤K≤N22≤K≤N2
KK is even
1≤Xi,Yi≤N1≤Xi,Yi≤N for each valid ii
2≤Li≤Ri≤642≤Li≤Ri≤64 for each valid ii

Example Input
6 6
1 2 4 5
2 3 3 8
3 6 2 6
4 1 3 7
4 6 3 3
6 6 1 10

Example Output
3
1 4 LDDD
2 3 RRRD
6 5 UU

Explanation
The positions of checkpoints are marked by integers in the following grid:
.1....
..2...
.....3
4....5
......
.....6

We choose a set of 33 paths:

From checkpoint 11 to checkpoint 44: (1,2)→(1,1)→(2,1)→(3,1)→(4,1)(1,2)→(1,1)→(2,1)→(3,1)→(4,1).
From checkpoint 22 to checkpoint 33: (2,3)→(2,4)→(2,5)→(2,6)→(3,6)(2,3)→(2,4)→(2,5)→(2,6)→(3,6).
From checkpoint 66 to checkpoint 55: (6,6)→(5,6)→(4,6)(6,6)→(5,6)→(4,6).

Test generation
The source code used to generate test data can be downloaded here.
First, a parameter EE to limit the lengths of the paths is chosen. EE can be 88, 1616, 3232 or 6464. There are 33 test files for each value of EE.
The generator constructs a set HH of disjoint undirected paths covering the whole grid as follows:

For each pair (r,c)(r,c) (1≤r,c≤N1≤r,c≤N), add the path which contains only the cell (r,c)(r,c) to HH. Now, HH contains N2N2 paths.
Let SS be the set of all 4N24N2 tuples (x,y,d)(x,y,d), where xx and yy are integers between 11 and NN and d=(d0,d1)d=(d0,d1) is a pair of integers from the set {(−1,0),(1,0),(0,−1),(0,1)}{(−1,0),(1,0),(0,−1),(0,1)}.
While SS is not empty, choose an element (x,y,d)(x,y,d) from SS uniformly randomly and remove it from SS. Let's denote A=(x,y)A=(x,y) and B=(x+d0,y+d1)B=(x+d0,y+d1).
If BB is not a valid cell in the grid, continue the process.
Otherwise, find the path P∈HP∈H that has the cell AA as an endpoint and the path Q∈HQ∈H that has the cell BB as an endpoint.
If both paths PP and QQ exist (it follows that they are unique) and the sum of their lengths does not exceed EE, then remove PP and QQ from HH and add the path formed by concatenating them (and connecting cells AA and BB) to HH. Note that the paths can be concatenated because the cells AA and BB are adjacent.

Afterwards, paths with length 11 are removed from HH. For each path that remains in HH, a checkpoint is placed in each of its endpoints (therefore, K=2|H|K=2|H|). The checkpoints are numbered randomly.
Next, the parameters L1,L2,…,LKL1,L2,…,LK and R1,R2,…,RKR1,R2,…,RK are generated. For each the path P∈HP∈H:

Let's denote the length of this path by ll.
We choose an integer tt between 00 and min(8,E/4)min(8,E/4) uniformly randomly.
Then, for each of its endpoints, choose its parameters LiLi and RiRi uniformly randomly and independently among all pairs of integers (L,R)(L,R) which satisfy 2≤L≤l≤R≤E2≤L≤l≤R≤E and R−L=tR−L=t.

Scoring
If you do not output a set of paths satisfying all constraints, you will receive the WA verdict.
The score of each test file is (2M/K)4(2M/K)4, where K/2K/2 is the maximum possible value of MM. The score of a submission is the sum of scores of all test files. Your goal is to maximise the score of your submission.
There are 12 test files. During the contest, the displayed score will account for exactly 4 test files (one for each value of EE), i.e. your score reflects your submission's performance on 33% of the test files. However, if your program gets a non-AC verdict on any test file, your submission's verdict will be non-AC. In other words, an AC verdict denotes that your program runs successfully on all the test files. After the end of the contest, your score will be changed to include the sum of your program's scores over the other 8 test files.



Author:
6★physics0523


Tags:

               
                 physics0523
                 
               
             
             



                        Difficulty Rating:
                    

3648


Date Added:
13-09-2020


Time Limit:
5 secs


Source Limit:
50000 Bytes


Languages:
CPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, SQLQ, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM





Submit

