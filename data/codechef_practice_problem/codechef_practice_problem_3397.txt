
Read problem statements in Bengali, Hindi, Mandarin Chinese, Russian, and Vietnamese as well.
Chef Ada always prepares delicious and nutritious dishes. Her secret is to use genetic engineering of bacteria to synthesise proteins. A protein is denoted by a string of uppercase English characters 'A'-'T'; each character represents an amino acid.
The genome of Ada's bacteria is also denoted by a string with length NN. Each character of this string is 'A', 'C', 'T' or 'G', representing a nucleotide. The nucleotides are also numbered 11 through 44 in the same order 'A', 'C', 'T', 'G'. Let's denote the number of a nucleotide xx by n(x)n(x).
You are given the starting genome GG of Ada's bacteria; at any point, all bacteria must have the same genome. You may perform operations of the following types (in any order, any number of times):

1 L R: Reverse the substring between the LL-th and RR-th character inclusive (1≤L≤R≤N1≤L≤R≤N), i.e. for each L≤i<L+R−i≤RL≤i<L+R−i≤R, swap the ii-th and L+R−iL+R−i-th nucleotide of the current genome. The cost of this operation is K+min(L−1,R−L,N−R)K+min(L−1,R−L,N−R) chefcoins.
2 i Y: Mutate, i.e. change the ii-th nucleotide of the current genome (1≤i≤N1≤i≤N) to the nucleotide YY. The cost of this operation is A+min(i,N+1−i)⋅Bn(X),n(Y)A+min(i,N+1−i)⋅Bn(X),n(Y) chefcoins, where XX denotes the ii-th nucleotide before this mutation.

Each amino acid is encoded by one or more codons ― a codon is a string of three nucleotides. Each codon encodes exactly one amino acid. Note that there are 4343 different codons and only 2020 amino acids. For each codon, you are given the amino acid it encodes.
A bacteria can produce a protein PP with length LL amino acids if its genome contains a substring of 3⋅L3⋅L nucleotides that can be translated to PP, i.e. split into a sequence of LL consecutive substrings Z1,Z2,…,ZLZ1,Z2,…,ZL with lengths 33 such that for each ii (1≤i≤L1≤i≤L), ZiZi is a codon for the ii-th amino acid (character) of PP.
For example, let's suppose that codons "ATA" and "TAT" are translated to amino acids 'R' and 'S' respectively. Then, a bacteria with a genome "ATATATA" can produce only the following proteins (the codons used to produce them are marked by brackets):

"[ATA]TATA" to "R"
"A[TAT]ATA" to "S"
"[ATA][TAT]A" to "RS"
"A[TAT][ATA]" to "SR"

For her next dish, Ada needs MM proteins P1,P2,…,PMP1,P2,…,PM. Her bacteria do not have to produce all proteins, since they can be bought on the market; for each valid ii, the cost of the protein PiPi is CiCi chefcoins. However, Ada wants the final bacteria to be able to synthesise at least 5050 of the required proteins.
As her apprentice, your task is to perform some (possibly zero) genetic operations on the initial genome and decide which proteins should be produced from the resulting genome; all other proteins are bought on the market. Your goal is to minimise the total cost (in chefcoins).
Input

The first line of the input contains four space-separated integers NN, MM, KK and AA.
MM lines follow. For each ii (1≤i≤M1≤i≤M), the ii-th of these lines contains a string PiPi, followed by a space and an integer CiCi.
The next line contains a single string GG with length NN.
Each of the next four lines contains four space-separated integers. For each ii and jj (1≤i,j≤41≤i,j≤4), the jj-th integer on the ii-th line is Bi,jBi,j.
Each of the next 6464 lines contains a single string with length 44. The first three characters of this string denote a unique codon and the last character denotes the amino acid which it encodes.

Output

First, print a line containing two space-separated integers QQ (0≤Q≤1050≤Q≤105) and UU (50≤U≤M50≤U≤M) ― the number of operations you want to perform and the number of required proteins the final bacteria will produce.
Then, print QQ lines. Each of these lines should contain the description of an operation you want to perform, in the format given above.
Finally, print UU lines. Each of these lines should contain two space-separated integers ii and LL denoting that the protein PiPi can be generated by the substring which starts with the LL-th character in the final genome. You will receive a Wrong Answer veredict if you print the same ii twice.

Constraints

N=215N=215
1≤M≤2121≤M≤212
K=213K=213
A=213A=213
0≤Bi,j≤220≤Bi,j≤22 for each valid i,ji,j
227≤Ci≤228227≤Ci≤228 for each valid ii

Example Input
9 3 8192 8192
AB 134217728
BC 134217728
ABC 134217728
ACCATGGAA
0 1 2 3
1 2 3 0
2 3 0 1
3 0 1 2
ACGA
TACB
GTAC
...
[61 codons more]
...

Example Output
2 3
1 3 6
2 8 T
1 1
2 4
3 1

Explanation

The initial genome is "ACCATGGAA".
In the first operation, the substring "CATG" is reversed: "AC[CATG]GAA" becomes "ACGTACGAA".
In the second operation, the 88-th nucleotide ('A') is replaced by 'T': "ACGTACG[A]A" becomes "ACGTACGTA".

Some of the proteins which can be synthesised from the final genome are:

"AB" from "[ACG][TAC]GTA"
"BC" from "ACG[TAC][GTA]"
"ABC" from "[ACG][TAC][GTA]"

Scoring
The score of a test file is the cost of obtaining all required proteins, i.e. the number of chefcoins you need to pay. The score of a submission is the sum of costs of all test files. Your goal is to minimise the score of your submission.
There are twelve test files. During the contest, the displayed score will account for exactly four test files, i.e. your score reflects your submission's performance on approximately 33.33% (4/12) of the test files; However, if your program gets a non-AC verdict on any test file, your submission's verdict will be non-AC. In other words, an AC verdict denotes that your program runs successfully on all the test files. After the end of the contest, your score will be changed to include the sum of your program's scores over the other 8 test files.
Test Generation
All translations codon -> amino acid are generated independently from each other. For each codon, the amino acid it encodes is chosen uniformly randomly. Bx,yBx,y is randomly chosen between 00 and 2222 (inclusive).
To generate the genome GG, first, a genome TT with length NN is generated; each nucleotide of this genome is chosen uniformly randomly. Next, each of the proteins P1,P2,…,PMP1,P2,…,PM is generated as follows:

Choose the length ll of the protein uniformly randomly between LpLp and RpRp inclusive.
Choose a substring SpSp in the genome uniformly randomly among all substrings with length 3l3l.
Translate SpSp to get the protein PiPi.
Choose the cost CiCi uniformly randomly between 227227 and 228228 inclusive.

Then, the genome TT is modified by performing the following operations in this order:

Mutations: NMNM different nucleotides are chosen uniformly randomly. Each of them is changed to a uniformly random (possibly the same) nucleotide, independently from all other changed nucleotides.
Reversals: NRNR times, a substring of the current genome is chosen uniformly randomly and reversed.

The resulting string after these NM+NRNM+NR operations is the genome GG.
Finally, here is how the remaining parameters are chosen:

MM can be either 210210 or 212212.
LpLp and RpRp can be either 100100 and 200200 respectively, or 200200 and 300300 respectively.
NMNM and NRNR can be either 00 and 212212 espectively, 212−27212−27 and 2727 respectively, or 2929 and 212−29212−29 respectively.

There is one test file for each combination of the parameters MM, LpLp, RpRp, NMNM and NRNR.



Author:
7★alei


Editorial:
https://discuss.codechef.com/problems/SYNBAC


Tags:

               
                 alei, aug19, challenge, vijju123
                 
               
             
             



                        Difficulty Rating:
                    

3699


Date Added:
22-07-2019


Time Limit:
 - 5 secs


Source Limit:
50000 Bytes


Languages:
PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM





Submit

