
Read problem statements in Mandarin Chinese, Russian, and Vietnamese as well.
This is an interactive problem.
It often happens when going out in larger groups that somebody ends up paying more than his share. Therefore, NN imaginative people (numbered 11 through NN) decided to share their expenses through a ledger system. It is your task to implement it.
This system must listen for payment requests in real time, but it does not have to process them right away. It should also account for MM available currencies (numbered 11 through MM) and variable exchange rates between them.
Currency 11 is the local currency. It is only possible to buy other currencies using currency 11 (not, for example, to buy currency 22 using currency 33) and it is impossible to buy currency 11. Initially, the digital wallet of each user contains only 109109 units of currency 11 and all exchange rates are 11. For each valid ii, let's denote the exchange rate of currency ii by RiRi.
You should process QQ requests of two types:

User aa (1≤a≤N1≤a≤N) borrows KK units of currency 11 from user bb (1≤b≤N1≤b≤N, a≠ba≠b), i.e. aa owes bb additional KK units of currency 11.
The exchange rate of currency cc (1≤c≤M1≤c≤M) changes to XX.

After each request, you may perform any number of operations. There are two types of operations:

SEND a b c K: Transfer KK units of currency cc from user aa to user bb (0≤K0≤K, 1≤a,b≤N1≤a,b≤N, 1≤c≤M1≤c≤M). This operation fails if aa currently owns less than KK units of currency cc, regardless of the amounts of money in other currencies in this user's wallet.
XCHG a c K: Buy KK units of currency cc for user aa (0≤K0≤K, 1≤a≤N1≤a≤N, 2≤c≤M2≤c≤M). The amount of money in currency 11 in the wallet of user aa decreases by Rc⋅KRc⋅K and the amount of money in currency cc in this wallet increases by KK. This operation fails if the amount of money in the wallet of user aa was smaller than Rc⋅KRc⋅K.

For each person ii, let's define a value called the balance of this user's account (denoted by BiBi) describing how much money (in units of currency 11) this user owes to others or how much he is owed; initially, all balances are 00.

In each request of type 00, the balance BaBa decreases by KK and the balance BbBb increases by KK.
In each request of type 11 and each XCHG operation, the balances are unchanged.
In each SEND operation, the balance BaBa increases by K/RcK/Rc and the balance BbBb decreases by K/RcK/Rc.

It is allowed to optimise the money transfers (SEND operations). For example, if user aa owes user bb 1010 units of currency 11, dd owes bb 55 units and bb owes cc 1515 units, it is enough for users aa and dd to send 1010 and 55 units of currency 11 respectively to user cc.
At the end, all balances must be 00. Note that the balances do not correspond to the total amount of money (in units of currency 11) in the digital wallets and it is possible for anyone to have less or more money in the digital wallet than if all money transfers were done in currency 11. The final contents of the digital wallets do not matter.
Interaction

First, you should read a line containing three space-separated integers NN, MM and QQ.
Then, you should process QQ requests. For each request, you must do the following:
Read a line describing the request in the format 0 a b K (user aa sends KK units of currency 11 to user bb) or 1 c X (currency cc is now worth XX times currency 11).
Print a line containing one integer TT - the number of operations you want to make immediately after this request (possibly 00).
Print TT lines. Each of these lines should describe an operation in the format SEND a b c K or XCHG a c K.
Read a line containing a single integer. If this integer is 11, all operations were completed successfully and you should continue processing the remaining requests. If it is −1−1, you should terminate your program immediately to receive the Wrong Answer verdict. Otherwise, you may receive any verdict.

Don't forget to flush the output after printing each line!
Example
Grader            You
5 2 3
0 1 2 5
                  2
                  XCHG 1 2 300
                  SEND 1 2 2 5
1
1 2 3
                  0
1
0 1 2 9
                  1
                  SEND 1 2 2 3
1

Explanation
There are 55 people, 22 currencies and 33 requests.

After the first request, we choose to invest in currency 22 for user 11 and then pay their debt using it. At the moment, currency 22 is worth exactly the same as the local currency.
The second request informs us that the investment was in fact profitable and the value of the money we converted to currency 22 has tripled.
In the third request, we can just send 33 units of currency 22, because those are worth 99 units of the local currency at this point in time.

Scoring
Let's denote the total amount of money transferred in SEND operations (the sum of KK in these operations) by SS. The grader computes SS and the waiting penalty PP. Initially, PP is 00; after processing each request and performing the chosen operations, the grader adds ∑Ni=1|Bi|∑i=1N|Bi| to PP. The score of each test case (and therefore each test file) is S+PQS+PQ.
The score of a submission is the sum of scores of all test files. Your goal is to minimise the score of your submission.
There are twenty test files - four of each type described below. During the contest, the displayed score will account for exactly four test files, i.e. your score reflects your submission's performance on 20% (4/20) of the test files; these tests have types 11, 22, 33 and 55. However, if your program gets a non-AC verdict on any test file, your submission's verdict will be non-AC. In other words, an AC verdict denotes that your program runs successfully on all the test files. After the end of the contest, your score will be changed to include the sum of your program's scores over the other sixteen test files.
Test generation
Let MAXMULTIPLYMAXMULTIPLY be the maximum value of XX over all requests of type 11 and MAXSENDMAXSEND be the maximum value of KK over all requests of type 00. There are 55 types of tests:


#
N
M
Q
MAX_MULTIPLY
MAX_SEND


1
100
1
1000
20
1


2
20
20
1000
100
100


3
20
100
1000
100,000
100,000


4
100
100
1000
100
100


5
100
100
1000
100,000
100,000


In each test, the requests are generated randomly independently as follows:

If M≠1M≠1, we choose the request type uniformly randomly between 00 and 11. Otherwise, each request has type 00.
For a request of type 00, we choose the triple of parameters (a,b,K)(a,b,K) uniformly randomly, i.e. each valid triple of parameters has the same probability of being chosen.
For a request of type 11, we choose cc uniformly randomly between 22 and MM inclusive and XX uniformly randomly between 11 and MAXMULTIPLYMAXMULTIPLY inclusive.




Author:
7★bciobanu


Tags:

               
                 bciobanu
                 
               
             
             



                        Difficulty Rating:
                    

3521


Date Added:
18-04-2019


Time Limit:
1 secs


Source Limit:
50000 Bytes


Languages:
PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SCM guile, PERL6, ERL, CLPS, PRLG, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM





Submit

