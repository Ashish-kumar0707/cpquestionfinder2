
Read problem statements in Bengali, Mandarin Chinese, Russian, and Vietnamese as well.
Let f(n)f(n) be the number of ways to partition the array [1,2,3,…,n][1,2,3,…,n] into contiguous subarrays such that every pair of adjacent subarrays in the partition have sums of different parity.

What is a contiguous subarray?
    A contiguous subarray of an array AA is an array that can be obtained by deleting some (possibly none) elements from the front of AA and some (possibly none) elements from the end of AA. The subarrays of an array AA (11-indexed) of size nn are given by [Ai,Ai+1,…,Aj][Ai,Ai+1,…,Aj] for each pair of integers (i,j)(i,j) such that 1≤i≤j≤n1≤i≤j≤n.


What is a partition of an array into contiguous subarrays?
    A partition of the array AA into contiguous subarrays is a set of subarrays of AA, {S1,S2,S3,…,Sk}{S1,S2,S3,…,Sk}, such that every element of the array belongs to exactly one of the subarrays S1,S2,…,SkS1,S2,…,Sk.


Which partitions are counted in f(n)f(n)?
    Consider a partition {S1,S2,…,Sk}{S1,S2,…,Sk} of the array [1,2,…,n][1,2,…,n], where SiSi are in sorted order, i.e. every element in SiSi is smaller than every element in SjSj for all i<ji<j. Then f(n)f(n) is the number of partitions such that 𝚜𝚞𝚖(Si)≢𝚜𝚞𝚖(Si+1)(mod2)sum(Si)≢sum(Si+1)(mod2) for all 1≤i<k1≤i<k. 𝚜𝚞𝚖(Si)sum(Si) is the sum of all elements in SiSi.

Let S0(n)=f(n)S0(n)=f(n) and Sk+1(n)=Sk(1)+Sk(2)+Sk(3)+⋯+Sk(n)Sk+1(n)=Sk(1)+Sk(2)+Sk(3)+⋯+Sk(n) for k≥0k≥0.
Given nn and kk, find Sk(n)mod998 244 353Sk(n)mod998 244 353.
Input

The first line contains a single integer TT, the number of test cases.
The first and only line of each test case contains two integers nn, kk.

Output

For each test case print in a separate line, the value of Sk(n)mod998 244 353Sk(n)mod998 244 353.

Constraints

1≤T≤30001≤T≤3000
0≤k≤30000≤k≤3000
1≤n≤10181≤n≤1018
The sum of kk over all test cases does not exceed 30003000.

Subtasks

Subtask #1 (1 point):

n≤20n≤20
The time limit for this subtask is 1 second.
Subtask #2 (4 points):

n≤1000n≤1000 (Time limit : 1 sec)
The time limit for this subtask is 1 second.
Subtask #3 (10 points):

n≤106n≤106 
k=0k=0 for all test cases. 
The time limit for this subtask is 2 seconds.
Subtask #4 (20 points):

The sum of kk is at most 100100.
The time limit for this subtask is 2 seconds.
Subtask #5 (25 points):

The sum of kk is at most 30003000.
k≤100k≤100 and is same for all test cases.
The time limit for this subtask is 2 seconds.
Subtask #6 (40 points): 

Original constraints
The time limit for this subtask is 2 seconds.

Sample Input
12
1 0
2 0
3 0
4 0
5 0
2 1
2 2
3 3
4 4
5 5
1000000000000000000 200
1000000000000000000 2773

Sample Output
1
2
2
3
6
3
4
14
51
191
13413678
697825985

Explanation
We first find f(n)f(n) for n=1,2,3,4,5n=1,2,3,4,5.
When n=1n=1, there is only one partition [1][1]. Since there is only one subarray, there are no adjacent subarrays in this partition and hence should be counted in f(1)f(1), therefore f(1)=1f(1)=1.
When n=2n=2, there are 22 partitions possible, [1,2][1,2] and [1],[2][1],[2]. The first partition has no adjacent subarrays and so is counted in f(2)f(2).
The second partition has sums 1,21,2 which are alternating in parity and so is also counted in f(2)f(2), therefore f(2)=2f(2)=2.
When n=3n=3, there are 44 partitions possible. The partitions are shown below.



Partition
Sum of subarrays
Are the sum of subarrays alternating in parity ?




[1, 2, 3]
{6}
Yes


[1], [2, 3]
{1, 5}
No


[1, 2], [3]
{3, 3}
No


[1], [2], [3]
{1, 2, 3}
Yes



There are in total 22 partitions whose subarrays sums are alternating in parity, therefore f(3)=2f(3)=2
When n=4n=4, there are 88 partitions. The partitions are shown below.



Partition
Sum of subarrays
Are the sum of subarrays alternating in parity ?




[1, 2, 3, 4]
{10}
Yes


[1], [2, 3, 4]
{1, 9}
No


[1, 2], [3, 4]
{3, 7}
No


[1], [2], [3, 4]
{1, 2, 7}
Yes


[1, 2, 3], [4]
{6, 4}
No


[1], [2, 3], [4]
{1, 5, 4}
No


[1, 2], [3], [4]
{3, 3, 4}
No


[1], [2], [3], [4]
{1, 2, 3, 4}
Yes



There are in total 22 partitions whose subarrays sums are alternating in parity, therefore f(3)=2f(3)=2
When n=5n=5, there are in total 1616 partitions. The partitions are shown below.



Partition
Sum of subarrays
Are the sum of subarrays alternating in parity ?




[1, 2, 3, 4, 5]
{15}
Yes


[1], [2, 3, 4, 5]
{1, 14}
Yes


[1, 2], [3, 4, 5]
{3, 12}
Yes


[1], [2], [3, 4, 5]
{1, 2, 12}
No


[1, 2, 3], [4, 5]
{6, 9}
Yes


[1], [2, 3], [4, 5]
{1, 5, 9}
No


[1, 2], [3], [4, 5]
{3, 3, 9}
No


[1], [2], [3], [4, 5]
{1, 2, 3, 9}
No


[1, 2, 3, 4], [5]
{10, 5}
Yes


[1], [2, 3, 4], [5]
{1, 9, 5}
No


[1, 2], [3, 4], [5]
{3, 7, 5}
No


[1], [2], [3, 4],[5]
{1, 2, 7, 5}
No


[1, 2, 3], [4], [5]
{6, 4, 5}
No


[1], [2, 3], [4], [5]
{1, 5, 4, 5}
No


[1, 2], [3], [4], [5]
{3, 3, 4, 5}
No


[1], [2], [3], [4], [5]
{1, 2, 3, 4, 5}
Yes



There are in total 66 partitions whose subarray sums are alternating in parity, therefore f(5)=6f(5)=6
S0(n)=f(n)S0(n)=f(n) and is found as described above.
To find S1(n),S2(n),…S1(n),S2(n),…, the given formula Sk+1(n)=Sk(1)+Sk(2)+⋯+Sk(n)Sk+1(n)=Sk(1)+Sk(2)+⋯+Sk(n) is used.
For example S1(n)=S0(1)+S0(2)+⋯+S0(n)S1(n)=S0(1)+S0(2)+⋯+S0(n).
The values for Sk(n)Sk(n) for k≤5k≤5 and n≤5n≤5 are tabulated below.



n
S0(n)
S1(n)
S2(n)
S3(n)
S4(n)
S5(n)




1
1
1
1
1
1
1


2
2
3
4
5
6
7


3
2
5
9
14
20
27


4
3
8
17
31
51
78


5
6
14
31
62
113
191






Author:
admin3


Editorial:
https://discuss.codechef.com/problems/PARTN01


Tags:

               
                 Cayley Hamilton Theorem, Matrix Exponentiation, Berlekamp Massey Algorithm, Recurrence Relation
                 
                     
                     Mathematics, Matrices, Error Detection, Matrix Multiplication, Algorithms, Recursion
                 
               
             
             



                        Difficulty Rating:
                    

3161


Date Added:
21-06-2021


Time Limit:
1 - 2 secs


Source Limit:
50000 Bytes


Languages:
CPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, SQLQ, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM





Submit

