
You are given a tree with NN nodes, numbered from 11 to NN. It is  rooted at node 11.
We call the simple path between node AA and node BB to be vertical if node AA lies on the path from the root to BB or node BB lies on the path from the root to AA. In other words, LCA (A,BA,B) must be AA or BB.  And in such cases, we define a node AA to lie above node BB in the tree if distance to AA from the root is less than the distance from the root to BB. Otherwise we define it to lie below BB.
You also have with you 11 Proton and EE Electrons (together called as particles) .  And you need to place these in some nodes of the tree.
Suppose we fix the proton to be at some node AA. We then call a placement of electrons valid if the following conditions are met  :-

Each node can have at most one particle in it. Also, every particle should be placed in some node.
Electrons can only be placed in nodes from which the simple path to AA is vertical (that is, they should either be above AA, or below AA).
At least XAXA nodes above AA should contain an electron and at least YAYA nodes below AA should contain an electron. 

The Dipole moment for a valid placement of electrons is calculated as follows :- 

Consider the sum of distances from AA to nodes which contain an electron and lie above AA. Let this sum be S1S1.
Similarly, consider the sum of distances from AA to nodes which contain an electron and lie below AA. Let this sum be S2S2.
The Dipole Moment is then defined as |S1−S2+ZAS1−S2+ZA|, here ZAZA is the positive charge if the proton is placed at AA. Here, |XX| refers to the absolute value of XX.

For every AA (1≤A≤N1≤A≤N) print the minimum dipole moment you can achieve among all valid placement in which the node AA contains the proton. 
In case there is no valid placement for a particular node AA, print −1−1 for that.
Note that the distance between two nodes is the number of edges in the simple path between them.
Input:

The first line contains a single integer, TT, which denotes the number of testcases.
The first line of each testcase will contain two integers, NN and EE, which denote the number of nodes and number of electrons respectively. 
The next N−1N−1 lines contain two integers uu and vv denoting that there’s an edge between uu and vv in the tree.
The i-th of the next NN lines contain 3 space separated integers ,  Xi,Yi,ZiXi,Yi,Zi 

Output:

Output TT lines, where each line should be containing NN space-separated integers, the AthAth integer should be the minimum dipole moment if the proton is placed at node AA , or -1 if there is no valid placement. 

Constraints

1≤T≤51≤T≤5
2≤N≤2∗1052≤N≤2∗105
1≤u,v≤N1≤u,v≤N
Sum of NN over all testcases ≤4∗105≤4∗105
1≤E≤N−11≤E≤N−1
0≤|Zi|≤1060≤|Zi|≤106
0≤Xi,Yi<N0≤Xi,Yi<N
0≤Xi+Yi≤E0≤Xi+Yi≤E
XA≤XA≤ number of nodes above AA, for all AA. 
YA≤YA≤ number of nodes below AA, for all AA. 

Subtasks

15 points : sum of NN over all testcases ≤300≤300
25 points : sum of NN over all testcases ≤3000≤3000
60 points : Original Constraints. 

Sample Input:
1
13 2
1 2
2 3
2 4
2 5
4 6
4 7
1 8
8 9
8 10
8 12
10 11
1 13
0 1 5
0 0 0
1 0 4
2 0 -3
1 0 -8
2 0 -6
2 0 3
0 2 0
1 0 -4
2 0 7
0 0 2
0 0 10
1 0 -2

Sample Output:
0 0 7 0 5 1 6 2 1 10 5 13 -1

Explanation:
With the proton fixed at node 11, we can achieve a dipole moment of 00 by placing the electrons at nodes 22 and 1212 for instance.



Author:
4★shashwatchandr


Editorial:
https://discuss.codechef.com/problems/EXUNF


Tags:

               
                 Trees, Persistent Segment Trees, Segment Trees, DFS, Binary Search
                 
                     
                     Data Structures, Graphs, Advanced Data Structures, Persistent Structures, Advanced Tree Structures, Algorithms, Graph Algos, Traversals, Searching
                 
               
             
             



                        Difficulty Rating:
                    

3343


Date Added:
25-09-2019


Time Limit:
2.5 secs


Source Limit:
50000 Bytes


Languages:
PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM





Submit

