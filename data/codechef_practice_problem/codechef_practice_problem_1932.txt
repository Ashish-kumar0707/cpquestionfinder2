
There are NN stones in a pond, each having a value AiAi written on it. A frog is at stone 11 and wants to reach stone NN. The frog can jump from a stone ii to any stone j(j>i)j(j>i). Let dd be the length of subarray (i.e. j−i+1j−i+1), then the energy required for the jump is (d⋅Ai)−Aj(d⋅Ai)−Aj. Find the minimum non-negative amount of energy required by the frog to reach the NN-th stone.
Note: It is possible that the total amount of energy required is negative, in that case, you should print the minimum non-negative value (i.e. 00).
Input Format

The first line contains an integer TT - the number of test cases. Then the test cases follow.
The first line of each test case contains an integer NN - the number of stones.
The second line contains NN integers denoting the numbers written on the stones.

Output Format
For each test case output a single integer - the minimum non-negative energy required by the frog.
Constraints

1≤T≤25001≤T≤2500 - the number of test cases
1≤N≤1051≤N≤105 - the number of stones.
1≤Ai≤1091≤Ai≤109 - the number written on stones.
Sum of NN over all test cases does not exceed 5⋅1055⋅105

Subtasks

Subtask 1 (5 points): 1≤N≤10,1≤Ai≤100,∑N≤501≤N≤10,1≤Ai≤100,∑N≤50
Subtask 2 (10 points): 1≤N≤100,1≤Ai≤100,∑N≤5001≤N≤100,1≤Ai≤100,∑N≤500
Subtask 3 (15 points): 1≤N≤1000,∑N≤50001≤N≤1000,∑N≤5000
Subtask 4 (70 points): original constraints


                        Sample Input 1
                        





4
3
6 1 3
4
3 1 10 4
3
7 9 1
2
1 5



                        Sample Output 1
                        





10
4
20
0


Explanation

Test Case 11: The frog can jump to the 2nd2nd stone from the 1st1st stone, and then to the 3rd3rd stone from the 2nd2nd stone.
Test Case 33: The frog can jump to the 3rd3rd stone directly from the 1st1st stone.
Test Case 44: The frog can jump to the 2nd2nd stone from the 1st1st stone. However, the energy required in this case is negative (i.e. −3−3), So we will print 00.




Author:
5★poetic_soul


Tester:
7★aryanc403


Editorial:
https://discuss.codechef.com/problems/SUBJUMP


Tags:

               
                 1D Arrays, Bottom-up, Greedy
                 
                     
                     Data Structures, Arrays, Algorithms, Dynamic Programming, DP Approach
                 
               
             
             



                        Difficulty Rating:
                    

2369


Date Added:
26-11-2021


Time Limit:
1 secs


Source Limit:
50000 Bytes


Languages:
CPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, SQLQ, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM





Submit

