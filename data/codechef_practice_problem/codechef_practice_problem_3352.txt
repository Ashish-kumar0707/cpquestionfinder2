
Read problem statements in Bengali and Hindi
Taran and Birju Pandey are good friends. In order to solidify their friendship, Taran sent Birju another challenge problem and asked him to find the best solution. Birju is good at writing stories as well as solving problems, but he is unable to solve this problem. Birju is worried that if he does not solve the problem, Taran might forget their friendship and unleash another war, deadlier than the last one. Therefore, he is asking you for help with this problem.
This is an interactive problem.
There are NN rectangles (numbered 11 through NN) in a plane described by Cartesian coordinates xx and yy. Initially (at time 00), each rectangle is moving parallel to one of the coordinate axes with fixed speed 11 unit per second. You are given the width, height and position of each rectangle, as well as the direction in which it is initially moving.
You must repeat the following process NN times:

Read a string SS given by the grader. This string is either "REVERSE" or "ROTATE" and describes the operation you should perform on one rectangle. These operations are applied in chronological order, i.e. the current operation is applied after all the previous operations have already been applied.
Choose one rectangle on which this operation should be applied. Let's denote the number of this rectangle by rr.
Choose the second ss (between 11 and NN inclusive) during which this operation should be applied. If an operation is applied during the ss-th second, it means that is applied strictly between time s−1s−1 and time ss. Since the operations must be performed in chronological order, you may only choose the ss-th second if all previous operations have been applied during the 11-st through ss-th second (inclusive).
If SS is "REVERSE", then during the ss-th second, the direction in which the rr-th rectangle is currently moving is reversed — it is changed from North to South, from South to North, from West to East or from East to West.
If SS is "ROTATE", then during the ss-th second, the direction in which the rr-th rectangle is currently moving is rotated by 90∘90∘. You must choose the new direction dirdir for this rectangle's velocity. From North to South, you may change the direction to East or West (but not to North or South), and vice versa.

The rectangles are moving in discrete steps — at the end of each second (after all the operations applied during this second are performed), each rectangle moves by 11 unit in its currently assigned direction. The rectangles do not move at time 00, but they move at time NN.
Let's assign numbers and coordinates to directions in the following way:

moving by 11 unit in direction 00 (North): the yy-coordinate increases by 11
moving by 11 unit in direction 11 (East): the xx-coordinate increases by 11
moving by 11 unit in direction 22 (South): the yy-coordinate decreases by 11
moving by 11 unit in direction 33 (West): the xx-coordinate decreases by 11

After NN seconds (immediately after the rectangles moved at time NN), consider the sum of common areas of each unordered pair of different rectangles, i.e. A=∑Ni=1∑Nj=i+1area(i,j)A=∑i=1N∑j=i+1Narea(i,j) where area(x,y)area(x,y) denotes the common area, i.e. area of the intersection of rectangles xx and yy.
Can we maximise AA if we apply the operations optimally? Good luck!
Interaction

First, your program should read a line containing a single integer ― the number of test cases TT. The description of interaction for TT test cases follows.
For each test case, you must start by reading a line containing a single integer NN.
Then, you must read NN lines. For each ii (1≤i≤N1≤i≤N), the ii-th of these lines contain five space-separated integers vxvx, vyvy, dxdx, dydy and dirdir describing a rectangle with width dxdx and height dydy moving in direction dirdir. The initial coordinates of this rectangle's vertices are (vx,vy)(vx,vy), (vx+dx,vy)(vx+dx,vy), (vx,vy+dy)(vx,vy+dy) and (vx+dx,vy+dy)(vx+dx,vy+dy).
Then, you must perform the following process NN times:
Read a line containing a single string SS.
If SS is "REVERSE", print a single line containing two space-separated integers rr and ss denoting that the current operation should be applied on the rr-th rectangle during the ss-th second.
If SS is "ROTATE", print a single line containing three space-separated integers rr, dirdir and ss denoting that the current operation should be applied on the rr-th rectangle during the ss-th second and the new direction of its velocity becomes dirdir.

Your output must satisfy the following conditions:

1≤r,s≤N1≤r,s≤N
0≤dir≤30≤dir≤3

Don't forget to flush the output after printing each line! Otherwise, the grader will wait for your response forever and the verdict of your submission may be anything except Accepted (which you might not like).
Test generation
In each test file, T=3T=3; also, integers NN and MXMX are chosen manually. Then, for each rectangle:

vxvx and vyvy are generated uniformly randomly between 00 and 104104 inclusive
dxdx and dydy are generated uniformly randomly between 11 and MXMX inclusive
dirdir is generated uniformly randomly between 00 and 33 inclusive
SS is generated uniformly randomly from the set {"ROTATE", "REVERSE"}

There are three types of tests:

type 1: five test files with N=500N=500 and MX=1000MX=1000
type 2: five test files with N=1000N=1000 and MX=100MX=100
type 3: ten test files with N=1000N=1000 and MX=1000MX=1000

Scoring
The score of each test case is computed as A⋅105/(N2MX2)A⋅105/(N2MX2). The score of each test file is the sum of scores of all test cases in that file. The score of a submission is the sum of scores of all test files.
There are twenty test files. During the contest, the displayed score will account for exactly four test files, i.e. your score reflects your submission's performance on 20% (4 out of 20) of the test files. However, if your program gets a non-AC verdict on any test file, your submission's verdict will be non-AC. In other words, an AC verdict denotes that your program runs successfully on all the test files. After the end of the contest, your score will be changed to the sum of your program's scores over the other sixteen test files.
Example
Grader                          You
2
3
0 0 5 5 0
1 1 3 4 2
1 0 2 2 1
REVERSE
                                1 1
ROTATE
                                3 2 1
ROTATE
                                3 3 3
3
0 0 5 5 0
1 1 3 4 2
1 0 2 2 1
REVERSE
                                1 1
ROTATE
                                3 2 1
ROTATE
                                3 3 3

Explanation
Both test cases are the same and they are given just to clarify how interaction works if there are multiple test cases.



Author:
6★taran_1407


Editorial:
https://discuss.codechef.com/problems/RECTARAN


Tags:

               
                 taran_1407
                 
               
             
             



                        Difficulty Rating:
                    

3607


Date Added:
3-04-2019


Time Limit:
2 secs


Source Limit:
50000 Bytes


Languages:
PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SCM guile, PERL6, ERL, CLPS, PRLG, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM





Submit

