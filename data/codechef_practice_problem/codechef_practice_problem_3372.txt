
Read problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.
The queen of ants hired Ada to build their anthill. Ada designed the anthill as NN rooms (numbered 11 through NN) interconnected by MM bidirectional roads (numbered 11 through MM). For simplicity, let's denote a road that connects rooms uu and vv by (u,v)(u,v). At any time, there may be at most one road between any two rooms and roads connecting a room with itself are not allowed.
Ada started from scratch by building the NN rooms and choosing the MM roads that should be built. In order to create the roads, she wants to give instructions to the ants and pay them in antcoins (a very small currency). There are two possible types of instructions:

KK, E={(x1,y1),(x2,y2),…,(xK,yK)}E={(x1,y1),(x2,y2),…,(xK,yK)}: Let EE be a set of KK distinct roads. The ants should build all roads in the set EE that do not already exist. Moreover, for every three distinct rooms uu, vv and ww, if (u,v)∈E(u,v)∈E and (v,w)∈E(v,w)∈E, then the ants should also build the road (u,w)(u,w) if it does not already exist. The cost of this instruction is A⋅KA⋅K antcoins.
uu, vv: The ants should remove the road (u,v)(u,v) if it exists. The cost of this instruction is RR antcoins.

After all the instructions are executed, only the planned MM roads should be built. Help Ada build the anthill while spending as few antcoins as possible.
Input

The first line of the input contains four space-separated integers NN, MM, AA and RR.
Each of the next MM lines contains two space-separated integers uu and vv denoting a road that connects rooms uu and vv.

Output
First, print a line containing a single integer QQ ― the number of instructions. Then, print QQ lines; each of these lines should describe one instruction in the format 1 K x_1 y_1 x_2 y_2 ... x_K y_K or 2 u v.
Test generation
For all test files (except the example), N=512N=512, A=10A=10 and R=2R=2. Next, internal parameters SS, LL and DD are chosen in the following way:

SS and LL can be 11 and 2,0482,048, 22 and 10241024, 1616 and 256256, or 6464 and 128128.
DD can be 00, 128128 or 2,0482,048.
There is one test file for each possible combination of these parameters.

The anthill is then generated as follows:

SS sets of LL distinct roads are chosen uniformly randomly and independently (In total S⋅LS⋅L distinct roads are chosen). The first instruction is executed SS times, once for each of these sets of roads.
Then, DD distinct existing roads are chosen uniformly randomly and independently. The second instruction is executed DD times, once for each of these roads.

Scoring
If any of your instructions are invalid, the sum of K2K2 over all instructions of the first type exceeds 106106 or the number of instructions Q>106Q>106, you will receive the Wrong Answer verdict. Otherwise, the score of a test file is the cost of constructing the anthill, i.e. the total number of antcoins paid to perform all instructions. The score of a submission is the sum of scores of all test files. Your goal is to minimise the score of your submission.
There are twelve test files. During the contest, the displayed score will account for exactly four test files, i.e. your score reflects your submission's performance on approximately 33.33% (4/12) of the test files. However, if your program gets a non-AC verdict on any test file, your submission's verdict will be non-AC. In other words, an AC verdict denotes that your program runs successfully on all the test files. After the end of the contest, your score will be changed to include the sum of your program's scores over the other 8 test files.
Example Input
4 5 10 2
1 2
2 3
3 4
4 1
1 3

Example Output
3
1 3 1 2 2 3 3 4
2 2 4
1 1 1 4




Author:
7★alei


Editorial:
https://discuss.codechef.com/problems/ANTHILL


Tags:

               
                 alei, alei, challenge, jan20, power-graphs, vijju123
                 
               
             
             



                        Difficulty Rating:
                    

3654


Date Added:
23-12-2019


Time Limit:
5 secs


Source Limit:
50000 Bytes


Languages:
PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM





Submit

