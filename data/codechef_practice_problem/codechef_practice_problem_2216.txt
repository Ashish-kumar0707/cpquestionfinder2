
Read problems statements in Mandarin chinese, Russian and Vietnamese as well.
As usual, Tom is trying to catch Jerry. To accomplish this task, Tom hired KK other cats (Tom does not take part in the chase). Formally, they are in a graph GG with NN vertices and MM edges. Let's denote the set of vertices of GG by VV. The graph has a special property: for each simple cycle containing at least four vertices, there is an edge which is not part of this cycle, but connects two distinct vertices on the cycle.
Jerry can only move along the edges of the graph, but arbitrarily fast. The cats don't have to follow the edges — they can use a helicopter to go to any vertices they want.
The process of catching Jerry happens in several rounds as follows:

In round 00, the cats choose a set of vertices X0⊆VX0⊆V with |X0|≤K|X0|≤K; Jerry chooses a vertex v0∈V∖X0v0∈V∖X0.
For each i≥0i≥0, let's denote the set of vertices containing cats in round ii by XiXi and the vertex containing Jerry by vivi. In round i+1i+1, the cats choose a subset Xi+1⊆VXi+1⊆V with |Xi+1|≤K|Xi+1|≤K.
Afterwards in round i+1i+1, Jerry must choose a vertex vi+1∈V∖Xi+1vi+1∈V∖Xi+1 such that there is a path from vivi to vi+1vi+1 which doesn't pass through any vertex in Xi∩Xi+1Xi∩Xi+1. If Jerry cannot choose such a vertex, the cats win.

If this process can last forever (KK cats are not enough to catch Jerry), then Jerry wins.
Your task is to calculate the minimum number of cats KK which Tom has to call in order to guarantee that Jerry will be caught (there is no winning strategy for Jerry).
Input

The first line of the input contains a single integer TT denoting the number of test cases. The description of TT test cases follows.
The first line of each test case contains two space-separated integers NN and MM.
MM lines follow. Each of these lines contains two space-separated integers uu and vv denoting an edge between vertices uu and vv.

Output
For each test case, print a single line containing one integer — the minimum number of cats needed to catch Jerry.
Constraints

1≤T≤101≤T≤10
3≤N≤1053≤N≤105
1≤M≤2⋅1051≤M≤2⋅105
1≤u,v≤N1≤u,v≤N
u≠vu≠v
there is at most one edge between each pair of vertices

Subtasks
Subtask #1 (10 points): 3≤N≤303≤N≤30
Subtask #2 (30 points): 3≤N≤1003≤N≤100
Subtask #3 (60 points): T≤5T≤5

                        Sample Input 1
                        





2
7 6
1 2
1 3
2 4
2 5
3 6
3 7
4 6
1 2
1 3
1 4
2 3
2 4
3 4



                        Sample Output 1
                        





2
4


Explanation
Example case 2: Since GG is a complete graph, you need enough cats to cover all vertices, so the answer is K=4K=4.
Invalid Example
Input
1
4 4
1 2
2 3
3 4
4 1

Output
3

Explanation
Note that this example is not valid, since the graph is a cycle with length 44 and no additional edge. It was added just for further clarification of the chase.
Example case 1: The answer is K=3K=3, since three cats can easily corner a mouse by confining it to one vertex, while 2 cats are not enough, because when one cat moves, the mouse can go anywhere without coming into contact with the only stationary cat.



Author:
7★rajat1603


Editorial:
https://discuss.codechef.com/problems/JERRYTOM


Tags:

               
                 Dijkstra's Algorithm
                 
                     
                     Algorithms, Graph Algos, Shortest Paths
                 
               
             
             



                        Difficulty Rating:
                    

2527


Date Added:
21-06-2018


Time Limit:
2 secs


Source Limit:
50000 Bytes


Languages:
PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SCM guile, PERL6, ERL, CLPS, PRLG, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM





Submit

